generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   
  email     String   @unique
  password  String
  salt      String 
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  student   Student?
  faculty   Faculty?
}

enum Role {
  FACULTY
  STUDENT
}

model Student {
  id               String          @id @default(uuid())
  userId           String          @unique
  rollNumber       String          @unique
  enrollmentNumber String          @unique
  department       String
  currentSemester  Int             // current semester number

  user             User            @relation(fields: [userId], references: [id])
  enrollments      StudentCourse[]
  attendances      Attendance[]
  semesters        Semester[]      // relation to semesters with grades
}

model Faculty {
  id            String   @id @default(uuid())
  userId        String   @unique
  employeeId    String   @unique
  department    String
  designation   String

  user          User     @relation(fields: [userId], references: [id])
  courses       Course[]
  announcements Announcement[]
}

model Course {
  id           String          @id @default(uuid())
  code         String          @unique
  name         String
  description  String?
  facultyId    String

  faculty      Faculty         @relation(fields: [facultyId], references: [id])
  enrollments  StudentCourse[]
  attendances  Attendance[]
  semestersGrades SemesterGrade[]  // link to SemesterGrade to track grades per semester
  announcements Announcement[]
  createdAt    DateTime        @default(now())
}


model StudentCourse {
  id        String   @id @default(uuid())
  studentId String
  courseId  String

  student   Student  @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
}

model Attendance {
  id        String   @id @default(uuid())
  studentId String
  courseId  String
  date      DateTime @db.Date  // Store only date part (YYYY-MM-DD)
  status    AttendanceStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student  @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  // One attendance record per student per course per day
  @@unique([studentId, courseId, date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

model Semester {
  id          String           @id @default(uuid())
  studentId   String
  number      Int              // e.g., 5 for 5th semester
  spi         Float            // Semester Performance Index
  cpi         Float            // Cumulative Performance Index
  createdAt   DateTime         @default(now())

  student     Student          @relation(fields: [studentId], references: [id])
  grades      SemesterGrade[]
}

model SemesterGrade {
  id          String   @id @default(uuid())
  semesterId  String
  courseId    String
  grade       Grade   // e.g., A, B, O
  gradePoint  Int      // e.g., 10, 9, 8

  semester    Semester @relation(fields: [semesterId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])
}

enum Grade {
  A
  B
  C
  D
  E
  F
  O
}

model Announcement {
  id         String   @id @default(uuid())
  title      String
  content    String
  courseId   String?
  facultyId  String
  postedAt   DateTime @default(now())

  faculty    Faculty  @relation(fields: [facultyId], references: [id])
  course     Course?  @relation(fields: [courseId], references: [id])
}
